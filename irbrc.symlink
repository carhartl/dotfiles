require 'rubygems'
require 'irb'
require 'irb/completion'
require 'irb/ext/save-history'

alias e exit

IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"
IRB.conf[:PROMPT_MODE] = :SIMPLE
IRB.conf[:AUTO_INDENT] = true

class Object
  def interesting_methods
    case self.class
    when Class
      self.public_methods.sort - Object.public_methods
    when Module
      self.public_methods.sort - Module.public_methods
    else
      self.public_methods.sort - Object.new.public_methods
    end
  end

  # list methods which aren't in superclass
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # print documentation
  #
  #   ri 'Array#pop'
  #   Array.ri
  #   Array.ri :pop
  #   arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = self.kind_of?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    puts `ri '#{method}'`
  end
end

begin
  # load hirb
  require 'hirb'

  # start hirb
  Hirb.enable
rescue LoadError => err
  warn "Couldn't load Hirb: #{err}"
end

def copy(str)
  IO.popen('pbcopy', 'w') { |f| f << str.to_s }
end

def paste
  `pbpaste`
end


# Rails specific
def r
  reload!
end

def recognize_route(path)
  # Converts a URL path String into a Hash showing the Rails routing for it.
  (@named_routes ||= Rails.application.routes).recognize_path(path)
end
alias :recognize_path :recognize_route

def path_helper_for(path)
  # Returns the name of the path helper method that can generate the path String given as argument.
  @hash_for__regexp ||= /\Ahash_for_/
  @hash_for__path_helper_method_names ||= Rails.application.routes.named_routes.helpers.map(&:to_s).select { |helper_name| helper_name =~ @hash_for__regexp }
  @path_helper_hash_to_path_helper_name_map ||= @hash_for__path_helper_method_names.inject({}) { |h, name| h[genericize_path_helper_hash(app.__send__(name))] = name[9..-1] ; h }

  @path_helper_hash_to_path_helper_name_map[genericize_path_helper_hash(recognize_path(path))]
end

private

def genericize_path_helper_hash(path_helper_hash)
  # maps a path helper hash into a genericized form so it's easier to match another such hash against
  path_helper_hash.delete_if { |key, value| key != :action && key != :controller }
end
